"""
This controller can be used to interact with GPT-3 through the GPT-3 API.
"""

import logging
import openai

class GPT():
    """
    This controller contains a number of methods for interacting with the GPT-3 API.
    """

    crossword_context_prompt = "Answer the following crossword clues:\n\nClue: Brain case (7)\n\nAnswer: Cranium\n\nClue: Poker-faced (7)\n\nAnswer: Deadpan\n\nClue: Vanquished (9)\n\nAnswer: Conquered\n\nClue: Act Properly (6)\n\nAnswer: Behave\n\nClue: {} ({})\n\nAnswer: "
    chat_context_prompt = "The following is a conversation with an AI assistant. The assistant is helpful, creative, clever, and very friendly.\n\nHuman: Hello, who are you?\nAI: I am an AI created by OpenAI. How can I help you today?\nHuman: {}\nAI: "
    summary_context_prompt = """Jupiter is the fifth planet from the Sun and the largest in the Solar System. It is a gas giant with a mass one-thousandth that of the Sun, but two-and-a-half times that of all the other planets in the Solar System combined. Jupiter is one of the brightest objects visible to the naked eye in the night sky, and has been known to ancient civilizations since before recorded history. It is named after the Roman god Jupiter.[19] When viewed from Earth, Jupiter can be bright enough for its reflected light to cast visible shadows,[20] and is on average the third-brightest natural object in the night sky after the Moon and Venus.
    Jupiter is primarily composed of hydrogen with a quarter of its mass being helium, though helium comprises only about a tenth of the number of molecules. It may also have a rocky core of heavier elements,[21] but like the other giant planets, Jupiter lacks a well-defined solid surface. Because of its rapid rotation, the planet's shape is that of an oblate spheroid (it has a slight but noticeable bulge around the equator).\n
    tl;dr: Jupiter is the largest planet in the solar system. It is a gas giant. It is the fifth planet from the sun. It is a very bright object in the night sky. It is named after the Roman god Jupiter.\n{}\ntl;dr: """

    def __init__(self, api_key):
        openai.api_key = api_key

    def crossword_answer(self, clue, answer_length):
        """
        Returns the answer to a crossword clue.

        Args:
            clue (str): The clue to answer.
            answer_length (int): The number of letters which should be in the answer.

        Returns:
            str: The answer to the clue.
        """

        response = openai.Completion.create(
            engine="davinci",
            prompt=self.crossword_context_prompt.format(clue, answer_length),
            temperature=0.5,
            max_tokens=20,
            top_p=1.0,
            frequency_penalty=0.0,
            presence_penalty=0.0,
            stop=['\n\n'],
            n=4,
        )

        logging.log(logging.INFO, "Response: %s", response)

        return self._get_choice(choices=response.choices, length=answer_length, remove_characters=['.', '_'])

    def chat(self, text_prompt):
        """
        Returns a response to a text prompt.

        Args:
            text_prompt (str): The text prompt to respond to.

        Returns:
            str: The GPT-3 generated response to the text prompt.
        """

        response = openai.Completion.create(
            engine="davinci",
            prompt=self.chat_context_prompt.format(text_prompt),
            temperature=0.9,
            max_tokens=150,
            top_p=1,
            frequency_penalty=0.0,
            presence_penalty=0.6,
            stop=["\n"],
            n=4,
        )

        logging.log(logging.INFO, "Response: %s", response)

        return self._get_choice(response.choices)

    def summarize(self, to_summarize: str):
        """
        Returns a summary of the text.

        Args:
            to_summarize (str): The text to summarize.

        Returns:
            str: The summary of the text generated by GPT-3.

        """

        response = openai.Completion.create(
            engine="davinci",
            prompt=self.summary_context_prompt.format(to_summarize),
            temperature=0.3,
            max_tokens=64,
            top_p=1,
            frequency_penalty=0,
            presence_penalty=0,
            stop=["\n"]
        )

        logging.log(logging.INFO, "Response: %s", response)

        return response.choices[0].text.strip()

    def _get_choice(self, choices, length=None, remove_repeated_characters=True, remove_characters=[]):
        """
        Get the answer from the list of choices using the criteria specified.

        Args:
            choices (list[dict]): The list of choices.
            length (int): The length of the answer.
            remove_repeated_characters (bool): Whether to remove answers with
                                               only 1 character repeated. E.g. "?????".
            remove_characters (list[str]): A list of characters to remove from the answer.

        Returns:
            str: The choice text which matches the criteria, 
                 or the first choice's text if none is found.

        """

        for choice in choices:
            text = choice.text

            for char in remove_characters:
                text = text.replace(char, '')

            text = text.strip()

            if len(text) == 0:
                continue

            if remove_repeated_characters and text == len(text) * text[0]:
                continue

            if length and len(text) != length:
                continue

            return text

        # If we don't find an answer with the correct length, return the first one.
        return choices[0].text
